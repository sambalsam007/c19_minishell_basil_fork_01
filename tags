!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/samd-hoo/files/c19_minishell_basil_fork_01.gg/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(LIBFT)	Makefile	/^$(LIBFT):$/;"	t
$(NAME)	Makefile	/^$(NAME): $(OBJECTS) $/;"	t
$(NAME)	src/libft/Makefile	/^$(NAME): $(OBJECTS)$/;"	t
%.o	src/libft/Makefile	/^%.o:%.c$/;"	t
0	compile_commands.json	/^{ "directory": "\/home\/samd-hoo\/files\/c19_minishell_basil_fork_01.gg", "file": "src\/cli\/com/;"	o
0	compile_commands.json	/^{ "directory": "\/home\/samd-hoo\/files\/c19_minishell_basil_fork_01.gg", "file": "src\/cli\/com/;"	s	array:0.arguments
1	compile_commands.json	/^{ "directory": "\/home\/samd-hoo\/files\/c19_minishell_basil_fork_01.gg", "file": "src\/cli\/com/;"	s	array:0.arguments
10	compile_commands.json	/^{ "directory": "\/home\/samd-hoo\/files\/c19_minishell_basil_fork_01.gg", "file": "src\/cli\/com/;"	s	array:0.arguments
11	compile_commands.json	/^{ "directory": "\/home\/samd-hoo\/files\/c19_minishell_basil_fork_01.gg", "file": "src\/cli\/com/;"	s	array:0.arguments
12	compile_commands.json	/^{ "directory": "\/home\/samd-hoo\/files\/c19_minishell_basil_fork_01.gg", "file": "src\/cli\/com/;"	s	array:0.arguments
13	compile_commands.json	/^{ "directory": "\/home\/samd-hoo\/files\/c19_minishell_basil_fork_01.gg", "file": "src\/cli\/com/;"	s	array:0.arguments
14	compile_commands.json	/^{ "directory": "\/home\/samd-hoo\/files\/c19_minishell_basil_fork_01.gg", "file": "src\/cli\/com/;"	s	array:0.arguments
15	compile_commands.json	/^{ "directory": "\/home\/samd-hoo\/files\/c19_minishell_basil_fork_01.gg", "file": "src\/cli\/com/;"	s	array:0.arguments
16	compile_commands.json	/^{ "directory": "\/home\/samd-hoo\/files\/c19_minishell_basil_fork_01.gg", "file": "src\/cli\/com/;"	s	array:0.arguments
2	compile_commands.json	/^{ "directory": "\/home\/samd-hoo\/files\/c19_minishell_basil_fork_01.gg", "file": "src\/cli\/com/;"	s	array:0.arguments
3	compile_commands.json	/^{ "directory": "\/home\/samd-hoo\/files\/c19_minishell_basil_fork_01.gg", "file": "src\/cli\/com/;"	s	array:0.arguments
4	compile_commands.json	/^{ "directory": "\/home\/samd-hoo\/files\/c19_minishell_basil_fork_01.gg", "file": "src\/cli\/com/;"	s	array:0.arguments
5	compile_commands.json	/^{ "directory": "\/home\/samd-hoo\/files\/c19_minishell_basil_fork_01.gg", "file": "src\/cli\/com/;"	s	array:0.arguments
6	compile_commands.json	/^{ "directory": "\/home\/samd-hoo\/files\/c19_minishell_basil_fork_01.gg", "file": "src\/cli\/com/;"	s	array:0.arguments
7	compile_commands.json	/^{ "directory": "\/home\/samd-hoo\/files\/c19_minishell_basil_fork_01.gg", "file": "src\/cli\/com/;"	s	array:0.arguments
8	compile_commands.json	/^{ "directory": "\/home\/samd-hoo\/files\/c19_minishell_basil_fork_01.gg", "file": "src\/cli\/com/;"	s	array:0.arguments
9	compile_commands.json	/^{ "directory": "\/home\/samd-hoo\/files\/c19_minishell_basil_fork_01.gg", "file": "src\/cli\/com/;"	s	array:0.arguments
ARGUMENT	minishell.h	/^	ARGUMENT,$/;"	e	enum:__anondf13db800103
BUFFER_SIZE	src/libft/libft.h	/^#  define BUFFER_SIZE /;"	d
CC	Makefile	/^CC=clang$/;"	m
CC	src/libft/Makefile	/^CC=clang$/;"	m
CFILES	src/libft/Makefile	/^CFILES=ft_format.c ft_printf.c ftpr_putchar.c ftpr_puthex.c ftpr_putint.c \\$/;"	m
CFLAGS	Makefile	/^CFLAGS= -Wall -Wextra -Werror -g$/;"	m
CFLAGS	src/libft/Makefile	/^CFLAGS=-Wall -Wextra -Werror -g$/;"	m
CLI_SRCS	Makefile	/^CLI_SRCS = command_line_inteface.c$/;"	m
CODEDIRS	src/libft/Makefile	/^CODEDIRS=.$/;"	m
DEBUG_FLAGS	Makefile	/^DEBUG_FLAGS= -fsanitize=address -fsanitize=undefined -fsanitize=bounds -fsanitize=null$/;"	m
ERRORHANDLER_SRCS	Makefile	/^ERRORHANDLER_SRCS = error_checks.c big_free.c error_messages.c$/;"	m
ERROR_CONTINUE	src/cli/command_line_inteface.c	/^#define ERROR_CONTINUE /;"	d	file:
ERROR_NULL	minishell.h	/^# define ERROR_NULL /;"	d
ERROR_STOP	src/cli/command_line_inteface.c	/^#define ERROR_STOP /;"	d	file:
EXEC	minishell.h	/^	EXEC = 1,$/;"	e	enum:__anondf13db800103
EXECUTOR	minishell.h	/^#define EXECUTOR /;"	d
EXECUTOR_SRCS	Makefile	/^EXECUTOR_SRCS = echo.c builtin_checks.c pwd_and_cd.c export.c run_binary.c redir_checks.c pipe_f/;"	m
FLAG	minishell.h	/^	FLAG,$/;"	e	enum:__anondf13db800103
HERE_DOC	minishell.h	/^	HERE_DOC,$/;"	e	enum:__anondf13db800203
INCDIRS	src/libft/Makefile	/^INCDIRS=.$/;"	m
INCFLAGS	Makefile	/^INCFLAGS= -I src\/libft -L src\/libft -lft -lreadline$/;"	m
INCLUDES	Makefile	/^INCLUDES = -I .\/libf$/;"	m
INPUT_REDIR	minishell.h	/^	INPUT_REDIR,$/;"	e	enum:__anondf13db800203
LEXER_SRCS	Makefile	/^LEXER_SRCS = tokenizer.c quote_handler.c redirect_handler.c argument_concatenation.c node_creati/;"	m
LIBFT	Makefile	/^LIBFT=.\/src\/libft\/libft.a$/;"	m
LIBFT_H	src/libft/libft.h	/^# define LIBFT_H$/;"	d
MAIN_PROCESS	minishell.h	/^#define MAIN_PROCESS /;"	d
MAIN_SRCS	Makefile	/^MAIN_SRCS= minishell_main.c init_data.c sighandler.c$/;"	m
MINISHELL_H	minishell.h	/^# define MINISHELL_H$/;"	d
NAME	Makefile	/^NAME=minishell$/;"	m
NAME	src/libft/Makefile	/^NAME=libft.a $/;"	m
OBJECTS	Makefile	/^OBJECTS = $(patsubst %.c,obj\/%.o,$(SRCS))$/;"	m
OBJECTS	src/libft/Makefile	/^OBJECTS=$(patsubst %.c,obj\/%.o,$(CFILES))$/;"	m
OPT	src/libft/Makefile	/^OPT=-O0$/;"	m
OUTPUT_REDIR	minishell.h	/^	OUTPUT_REDIR,$/;"	e	enum:__anondf13db800203
OUTPUT_REDIR_APPEND	minishell.h	/^	OUTPUT_REDIR_APPEND = 1,$/;"	e	enum:__anondf13db800203
PARSER_SRCS	Makefile	/^PARSER_SRCS = parser.c abstract_syntax_tree_creation_fcts.c redir_fcts.c environment_functions.c$/;"	m
PIPE	minishell.h	/^	PIPE,$/;"	e	enum:__anondf13db800103
REDIRECT	minishell.h	/^	REDIRECT,$/;"	e	enum:__anondf13db800103
SIGHANDLER_SRCS	Makefile	/^SIGHANDLER_SRCS =$/;"	m
SRCS	Makefile	/^SRCS = $(MAIN_SRCS) $(CLI_SRCS) $(EXECUTOR_SRCS) \\$/;"	m
SRC_DIRS	Makefile	/^SRC_DIRS = src\/cli src\/executor\/builtins src\/executor\/binaries \\$/;"	m
TESTFILE	src/libft/Makefile	/^TESTFILE=test$/;"	m
__anondf13db800103	minishell.h	/^typedef enum {$/;"	g
__anondf13db800203	minishell.h	/^typedef enum {$/;"	g
add_arguments	src/parser/abstract_syntax_tree_creation_fcts.c	/^static char	**add_arguments(t_token_node **curr_token_node,$/;"	f	typeref:typename:char **	file:
add_cmd_to_argarray	src/executor/binaries/run_binary.c	/^static char	**add_cmd_to_argarray(char **args, char *command)$/;"	f	typeref:typename:char **	file:
add_redirect	src/parser/redir_fcts.c	/^t_ast_redir *add_redirect(t_token_node **curr_token_node, $/;"	f	typeref:typename:t_ast_redir *
all	Makefile	/^all: $(LIBFT) obj $(NAME)$/;"	t
all	src/libft/Makefile	/^all: obj $(NAME)$/;"	t
amount_of_pipes	minishell.h	/^	int				amount_of_pipes;$/;"	m	struct:s_var_data	typeref:typename:int
argument_check	minishell.h	/^	bool 				argument_check;$/;"	m	struct:s_token_node	typeref:typename:bool
arguments	compile_commands.json	/^{ "directory": "\/home\/samd-hoo\/files\/c19_minishell_basil_fork_01.gg", "file": "src\/cli\/com/;"	a	object:0
arguments	minishell.h	/^	char				**arguments;$/;"	m	struct:s_ast_node	typeref:typename:char **
big_free	src/error_handler/big_free.c	/^void	big_free(t_var_data *var_data, char *prompt)$/;"	f	typeref:typename:void
calc_len	src/libft/ft_split.c	/^static size_t	calc_len(char const *s, char c)$/;"	f	typeref:typename:size_t	file:
check_and_create_path	src/executor/binaries/run_binary.c	/^static char *check_and_create_path(t_var_data *var_data, $/;"	f	typeref:typename:char *	file:
check_if_binary	src/executor/binaries/run_binary.c	/^int	check_if_binary(t_var_data *var_data, $/;"	f	typeref:typename:int
check_if_builtin	src/executor/builtins/builtin_checks.c	/^int	check_if_builtin(t_var_data *var_data, t_ast_node *ast_node)$/;"	f	typeref:typename:int
check_if_join_args	src/lexer/argument_concatenation.c	/^size_t	check_if_join_args(t_var_data *var_data, char *prompt, char *tmp_str,$/;"	f	typeref:typename:size_t
check_if_redir	src/executor/redirs/redir_checks.c	/^int	check_if_redir(t_var_data *var_data, t_ast_redir *redirect)$/;"	f	typeref:typename:int
check_pipe	src/executor/pipes/pipe_functions.c	/^int	check_pipe(t_var_data *var_data, $/;"	f	typeref:typename:int
check_single_dollar	src/lexer/var_handler.c	/^int			check_single_dollar(char *prompt, size_t *index, char **token)$/;"	f	typeref:typename:int
check_substr	src/libft/ft_strnstr.c	/^static int	check_substr(const char *b, const char *l, size_t i, size_t len)$/;"	f	typeref:typename:int	file:
check_valid_redir_syntax	src/lexer/redirect_handler.c	/^static int	check_valid_redir_syntax(char *tokenized_string, $/;"	f	typeref:typename:int	file:
clean	Makefile	/^clean:$/;"	t
clean	src/libft/Makefile	/^clean:$/;"	t
clean_prompt	src/cli/command_line_inteface.c	/^static int	clean_prompt(char **prompt)$/;"	f	typeref:typename:int	file:
command	minishell.h	/^	char 				*command;$/;"	m	struct:s_ast_node	typeref:typename:char *
content	src/libft/libft.h	/^	void			*content;$/;"	m	struct:s_list	typeref:typename:void *
count_bytes	src/libft/ft_itoa.c	/^static int	count_bytes(int n)$/;"	f	typeref:typename:int	file:
count_key	src/lexer/quote_handler.c	/^int	count_key(char **key, $/;"	f	typeref:typename:int
count_total_strlen	src/lexer/quote_handler.c	/^int	count_total_strlen(char *prompt,$/;"	f	typeref:typename:int
count_value	src/lexer/quote_handler.c	/^static int	count_value(char *key, $/;"	f	typeref:typename:int	file:
create_ast_node	src/parser/abstract_syntax_tree_creation_fcts.c	/^t_ast_node *create_ast_node(t_ast_node *prev_ast_node, $/;"	f	typeref:typename:t_ast_node *
create_node	src/lexer/node_creation.c	/^t_token_node	*create_node(char *tokenized_str,$/;"	f	typeref:typename:t_token_node *
create_path_or_envp	src/executor/binaries/run_binary.c	/^static char *create_path_or_envp(char *directory_path, $/;"	f	typeref:typename:char *	file:
createnode_freetmps	src/lexer/argument_concatenation.c	/^int createnode_freetmps(char **tmp_str, $/;"	f	typeref:typename:int
directory	compile_commands.json	/^{ "directory": "\/home\/samd-hoo\/files\/c19_minishell_basil_fork_01.gg", "file": "src\/cli\/com/;"	s	object:0
double_quotes	src/lexer/quote_handler.c	/^int	double_quotes(char *prompt,$/;"	f	typeref:typename:int
e_redir_type	minishell.h	/^} e_redir_type;$/;"	t	typeref:enum:__anondf13db800203
e_token_type_enum	minishell.h	/^} e_token_type_enum;$/;"	t	typeref:enum:__anondf13db800103
envvar	minishell.h	/^	char 			***envvar;$/;"	m	struct:s_var_data	typeref:typename:char ***
envvardict_to_envvararray	src/executor/binaries/run_binary.c	/^static char	**envvardict_to_envvararray(char ***envvar)$/;"	f	typeref:typename:char **	file:
error_checks	minishell.h	/^	t_error_checks  *error_checks;$/;"	m	struct:s_var_data	typeref:typename:t_error_checks *
execute_logic	src/cli/command_line_inteface.c	/^static int	execute_logic(t_var_data *var_data)$/;"	f	typeref:typename:int	file:
executor_level_syntax_error	minishell.h	/^	bool				executor_level_syntax_error;$/;"	m	struct:s_error_checks	typeref:typename:bool
export_exceptions	src/executor/builtins/export.c	/^static int	export_exceptions(t_var_data *var_data, $/;"	f	typeref:typename:int	file:
fclean	Makefile	/^fclean: clean$/;"	t
fclean	src/libft/Makefile	/^fclean: clean$/;"	t
file	compile_commands.json	/^{ "directory": "\/home\/samd-hoo\/files\/c19_minishell_basil_fork_01.gg", "file": "src\/cli\/com/;"	s	object:0
file	minishell.h	/^	char 				*file;$/;"	m	struct:s_ast_redir	typeref:typename:char *
filename_fill_logic	src/lexer/redirect_handler.c	/^static int filename_fill_logic(char *prompt,$/;"	f	typeref:typename:int	file:
filename_length_count_logic	src/lexer/redirect_handler.c	/^static int	filename_length_count_logic(char *prompt,$/;"	f	typeref:typename:int	file:
fill_all_values_except_command	src/parser/abstract_syntax_tree_creation_fcts.c	/^static int fill_all_values_except_command(t_token_node **curr_token_node,$/;"	f	typeref:typename:int	file:
fill_redirect_token	src/lexer/redirect_handler.c	/^static int	fill_redirect_token(char *prompt, $/;"	f	typeref:typename:int	file:
fill_token_expd_vars	src/lexer/var_handler.c	/^int			fill_token_expd_vars(char *prmpt, $/;"	f	typeref:typename:int
first_node_ast	minishell.h	/^	t_ast_node		*first_node_ast;$/;"	m	struct:s_var_data	typeref:typename:t_ast_node *
first_node_lexer	minishell.h	/^	t_token_node	*first_node_lexer;$/;"	m	struct:s_var_data	typeref:typename:t_token_node *
first_pipe	src/executor/pipes/pipe_functions.c	/^static int	first_pipe(t_var_data *var_data, $/;"	f	typeref:typename:int	file:
flag	minishell.h	/^	char				*flag;$/;"	m	struct:s_ast_node	typeref:typename:char *
free_all	src/libft/ft_split.c	/^static void	free_all(int j, char **ss)$/;"	f	typeref:typename:void	file:
free_args_and_redirs	src/error_handler/big_free.c	/^static void free_args_and_redirs(t_ast_node *tmp)$/;"	f	typeref:typename:void	file:
free_extra_values	src/libft/ft_create_dict.c	/^static void	free_extra_values(char **dict_entry, char *new_value)$/;"	f	typeref:typename:void	file:
free_lexer	src/error_handler/big_free.c	/^void	free_lexer(t_token_node *first_node_lexer)$/;"	f	typeref:typename:void
free_parser	src/error_handler/big_free.c	/^void	free_parser(t_ast_node *first_node_ast)$/;"	f	typeref:typename:void
free_var_data	src/error_handler/big_free.c	/^void	*free_var_data(t_var_data *var_data)$/;"	f	typeref:typename:void *
ft_add_entry	src/libft/ft_deletefrom_dict.c	/^static char	**ft_add_entry(int i_entry,$/;"	f	typeref:typename:char **	file:
ft_addto_dict	src/libft/ft_addto_dict.c	/^char	***ft_addto_dict(char *key, char *value, char ***dict)$/;"	f	typeref:typename:char ***
ft_atoi	src/libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f	typeref:typename:int
ft_bzero	src/libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f	typeref:typename:void
ft_calloc	src/libft/ft_calloc.c	/^void	*ft_calloc(size_t nmemb, size_t size)$/;"	f	typeref:typename:void *
ft_create_dict	src/libft/ft_create_dict.c	/^char	***ft_create_dict(char **list, char separator)$/;"	f	typeref:typename:char ***
ft_delete_dict	src/libft/ft_delete_dict.c	/^void	ft_delete_dict(char ***dict)$/;"	f	typeref:typename:void
ft_delete_from_dict	src/libft/ft_deletefrom_dict.c	/^char	***ft_delete_from_dict(char *key, char ***dict)$/;"	f	typeref:typename:char ***
ft_entry	src/libft/ft_addto_dict.c	/^char	***ft_entry(int i_entry, char ***new_dict, char ***dict)$/;"	f	typeref:typename:char ***
ft_existing_dict	src/libft/ft_addto_dict.c	/^char	***ft_existing_dict(char *key, char *value, char ***dict)$/;"	f	typeref:typename:char ***
ft_extend	src/libft/get_next_line.c	/^int	ft_extend(char **line, int *l_buf_mul)$/;"	f	typeref:typename:int
ft_format_and_count	src/libft/ft_format.c	/^void	ft_format_and_count(char s, va_list ap, size_t *count)$/;"	f	typeref:typename:void
ft_free_split	src/libft/ft_free_split.c	/^void ft_free_split(char **split_arg)$/;"	f	typeref:typename:void
ft_get_key	src/lexer/var_handler.c	/^char	*ft_get_key(char *prompt)$/;"	f	typeref:typename:char *
ft_get_value	src/libft/ft_get_value.c	/^char	*ft_get_value(char *key, char ***dict)$/;"	f	typeref:typename:char *
ft_isalnum	src/libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f	typeref:typename:int
ft_isalpha	src/libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f	typeref:typename:int
ft_isascii	src/libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f	typeref:typename:int
ft_isdigit	src/libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f	typeref:typename:int
ft_isprint	src/libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f	typeref:typename:int
ft_iswhitespace	src/libft/ft_iswhitespace.c	/^int	ft_iswhitespace(int c)$/;"	f	typeref:typename:int
ft_itoa	src/libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f	typeref:typename:char *
ft_lstadd_back	src/libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstadd_front	src/libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstclear	src/libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstdelone	src/libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstiter	src/libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f	typeref:typename:void
ft_lstlast	src/libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f	typeref:typename:t_list *
ft_lstmap	src/libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f	typeref:typename:t_list *
ft_lstnew	src/libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f	typeref:typename:t_list *
ft_lstsize	src/libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f	typeref:typename:int
ft_memchr	src/libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_memcmp	src/libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f	typeref:typename:int
ft_memcpy	src/libft/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memmove	src/libft/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memset	src/libft/ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_new_dict	src/libft/ft_addto_dict.c	/^static char	***ft_new_dict(char *key, char *value)$/;"	f	typeref:typename:char ***	file:
ft_print_dict	src/libft/ft_print_dict.c	/^void	ft_print_dict(char ***dict, char *separator, int fd)$/;"	f	typeref:typename:void
ft_print_error	src/error_handler/error_messages.c	/^int	ft_print_error(char *string)$/;"	f	typeref:typename:int
ft_print_error_null	src/error_handler/error_messages.c	/^void	*ft_print_error_null(char *string)$/;"	f	typeref:typename:void *
ft_printf	src/libft/ft_printf.c	/^int	ft_printf(const char *s, ...)$/;"	f	typeref:typename:int
ft_putchar_fd	src/libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f	typeref:typename:void
ft_putendl_fd	src/libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_putnbr_fd	src/libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f	typeref:typename:void
ft_putstr_fd	src/libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_reset_s	src/libft/get_next_line.c	/^void	ft_reset_s(char *s, int j)$/;"	f	typeref:typename:void
ft_s_eof_check	src/libft/get_next_line.c	/^int	ft_s_eof_check(char *s, char *line, int bytes_read)$/;"	f	typeref:typename:int
ft_set_to_zero	src/libft/get_next_line_utils.c	/^void	ft_set_to_zero(int *i, int *j, int *k)$/;"	f	typeref:typename:void
ft_split	src/libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f	typeref:typename:char **
ft_strchr	src/libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strdup	src/libft/ft_strdup.c	/^char	*ft_strdup(const char *s)$/;"	f	typeref:typename:char *
ft_striteri	src/libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f	typeref:typename:void
ft_strjoin	src/libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
ft_strlcat	src/libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlcpy	src/libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlen	src/libft/ft_strlen.c	/^size_t	ft_strlen(const char *str)$/;"	f	typeref:typename:size_t
ft_strmapi	src/libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f	typeref:typename:char *
ft_strncmp	src/libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f	typeref:typename:int
ft_strnstr	src/libft/ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t len)$/;"	f	typeref:typename:char *
ft_strrchr	src/libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strtok	src/lexer/tokenizer.c	/^int	ft_strtok(char *prompt, t_var_data *var_data, char **token, size_t *i)$/;"	f	typeref:typename:int
ft_strtrim	src/libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f	typeref:typename:char *
ft_substr	src/libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f	typeref:typename:char *
ft_tolower	src/libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f	typeref:typename:int
ft_toupper	src/libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f	typeref:typename:int
ft_update_dict	src/libft/ft_update_dict.c	/^void	ft_update_dict(char *key, char *new_value, char ***dict)$/;"	f	typeref:typename:void
ft_write_line	src/libft/get_next_line.c	/^char	*ft_write_line(char *s, char *line, int bytes_read, int fd)$/;"	f	typeref:typename:char *
ftpr_putchar	src/libft/ftpr_putchar.c	/^size_t	ftpr_putchar(char c)$/;"	f	typeref:typename:size_t
ftpr_puthex	src/libft/ftpr_puthex.c	/^size_t	ftpr_puthex(size_t h, char c)$/;"	f	typeref:typename:size_t
ftpr_putint	src/libft/ftpr_putint.c	/^size_t	ftpr_putint(int n)$/;"	f	typeref:typename:size_t
ftpr_putptr	src/libft/ftpr_putptr.c	/^size_t	ftpr_putptr(size_t p)$/;"	f	typeref:typename:size_t
ftpr_putstr	src/libft/ftpr_putstr.c	/^size_t	ftpr_putstr(char *s)$/;"	f	typeref:typename:size_t
ftpr_putunsdec	src/libft/ftpr_putunsdec.c	/^size_t	ftpr_putunsdec(unsigned int d)$/;"	f	typeref:typename:size_t
get_next_line	src/libft/get_next_line.c	/^char	*get_next_line(int fd)$/;"	f	typeref:typename:char *
handle_append_redir	src/executor/redirs/redir_checks.c	/^static int	handle_append_redir(char *filename, $/;"	f	typeref:typename:int	file:
handle_envvars	src/lexer/var_handler.c	/^static int	handle_envvars(char *key, $/;"	f	typeref:typename:int	file:
handle_here_doc	src/executor/redirs/redir_checks.c	/^static int handle_here_doc(t_var_data *var_data, char *filename)$/;"	f	typeref:typename:int	file:
handle_input_redir	src/executor/redirs/redir_checks.c	/^static int	handle_input_redir(char *filename, $/;"	f	typeref:typename:int	file:
handle_output_redir	src/executor/redirs/redir_checks.c	/^static int	handle_output_redir(char *filename, $/;"	f	typeref:typename:int	file:
handle_signal_child	src/main/sighandler.c	/^void	handle_signal_child(int sig, siginfo_t *info, void *context)$/;"	f	typeref:typename:void
handle_signal_heredoc	src/main/sighandler.c	/^void	handle_signal_heredoc(int sig, siginfo_t *info, void *context)$/;"	f	typeref:typename:void
handle_signal_parent	src/main/sighandler.c	/^void	handle_signal_parent(int sig, siginfo_t *info, void *context)$/;"	f	typeref:typename:void
handle_signals_through_termios	src/main/sighandler.c	/^int	handle_signals_through_termios(t_var_data *var_data)$/;"	f	typeref:typename:int
homemade_getpid	src/main/sighandler.c	/^int	homemade_getpid(void)$/;"	f	typeref:typename:int
init_envvar_list	src/main/init_data.c	/^char	***init_envvar_list(char **envp)$/;"	f	typeref:typename:char ***
init_envvar_noenvp	src/main/init_data.c	/^char	***init_envvar_noenvp(void)$/;"	f	typeref:typename:char ***
init_error_data	src/main/init_data.c	/^void	init_error_data(t_error_checks *error_checks)$/;"	f	typeref:typename:void
init_tokenizer	src/lexer/tokenizer.c	/^static int	init_tokenizer(t_token_node **first_node,$/;"	f	typeref:typename:int	file:
init_var_data	src/main/init_data.c	/^t_var_data	*init_var_data(char **envp)$/;"	f	typeref:typename:t_var_data *
isset	src/libft/ft_strtrim.c	/^static int	isset(char c, char const *set)$/;"	f	typeref:typename:int	file:
last_pipe	src/executor/pipes/pipe_functions.c	/^static int	last_pipe(t_var_data *var_data, int *pipe_fd)$/;"	f	typeref:typename:int	file:
lets_cleanup	autocompile.sh	/^lets_cleanup()$/;"	f
lets_compile	autocompile.sh	/^lets_compile()$/;"	f
lets_execute	autocompile.sh	/^lets_execute()$/;"	f
lets_valgrind	autocompile.sh	/^lets_valgrind()$/;"	f
lexer_level_syntax_error	minishell.h	/^	bool				lexer_level_syntax_error;$/;"	m	struct:s_error_checks	typeref:typename:bool
main	src/main/minishell_main.c	/^int	main(int ac, char **av, char **envp)$/;"	f	typeref:typename:int
make_table	src/libft/ft_split.c	/^static char	**make_table(char **ss, char const *s, char c)$/;"	f	typeref:typename:char **	file:
make_token	src/lexer/tokenizer.c	/^int	make_token(t_token_node *first_node,$/;"	f	typeref:typename:int
middle_pipes	src/executor/pipes/pipe_functions.c	/^static int	middle_pipes(t_var_data *var_data, int *pipe_fd)$/;"	f	typeref:typename:int	file:
ms_cd	src/executor/builtins/pwd_and_cd.c	/^int		ms_cd(t_var_data *var_data, t_ast_node *ast_node)$/;"	f	typeref:typename:int
ms_command_line_inteface	src/cli/command_line_inteface.c	/^int	ms_command_line_inteface(t_var_data *var_data)$/;"	f	typeref:typename:int
ms_echo	src/executor/builtins/echo.c	/^int	ms_echo(t_var_data *var_data, t_ast_node *ast_node)$/;"	f	typeref:typename:int
ms_env	src/executor/builtins/environment_functions.c	/^int	ms_env(t_var_data *var_data, t_ast_node *ast_node)$/;"	f	typeref:typename:int
ms_execute	src/cli/command_line_inteface.c	/^int	ms_execute(t_var_data *var_data)$/;"	f	typeref:typename:int
ms_export	src/executor/builtins/export.c	/^int	ms_export(t_var_data *var_data, $/;"	f	typeref:typename:int
ms_export_multiple_separators	src/executor/builtins/export.c	/^int	ms_export_multiple_separators(char **arg, int *j)$/;"	f	typeref:typename:int
ms_export_update_dicts	src/executor/builtins/export.c	/^static int	ms_export_update_dicts(t_var_data *var_data, $/;"	f	typeref:typename:int	file:
ms_lex_and_parse	src/cli/command_line_inteface.c	/^int	ms_lex_and_parse(t_var_data *var_data,$/;"	f	typeref:typename:int
ms_pwd	src/executor/builtins/pwd_and_cd.c	/^void	ms_pwd(t_var_data *var_data)$/;"	f	typeref:typename:void
ms_unset	src/executor/builtins/environment_functions.c	/^int	ms_unset(t_var_data *var_data, t_ast_node *ast_node)$/;"	f	typeref:typename:int
mulsep_logic	src/libft/ft_create_dict.c	/^static void	mulsep_logic(char *new_value, char *separ, char **dict_entry, int i)$/;"	f	typeref:typename:void	file:
multiple_separators	src/libft/ft_create_dict.c	/^static int	multiple_separators(char **dict_entry, char sep)$/;"	f	typeref:typename:int	file:
next	minishell.h	/^	struct s_token_node	*next;$/;"	m	struct:s_token_node	typeref:struct:s_token_node *
next	src/libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list *
next_redir	minishell.h	/^	struct s_ast_redir	*next_redir;$/;"	m	struct:s_ast_redir	typeref:struct:s_ast_redir *
no_leak	autocompile.sh	/^no_leak()$/;"	f
no_quotes_arg	src/lexer/var_handler.c	/^int	no_quotes_arg(char *prompt, size_t *index, char ***envvar, char **token)$/;"	f	typeref:typename:int
no_var_envvar	minishell.h	/^	char 			***no_var_envvar;$/;"	m	struct:s_var_data	typeref:typename:char ***
obj	Makefile	/^obj:$/;"	t
obj	src/libft/Makefile	/^obj:$/;"	t
obj/%.o	Makefile	/^obj\/%.o: %.c$/;"	t
obj/%.o	src/libft/Makefile	/^obj\/%.o: %.c$/;"	t
open_input_file_fd	minishell.h	/^	int				open_input_file_fd;$/;"	m	struct:s_var_data	typeref:typename:int
open_output_file_fd	minishell.h	/^	int				open_output_file_fd;$/;"	m	struct:s_var_data	typeref:typename:int
original_termios	minishell.h	/^	struct termios	original_termios;$/;"	m	struct:s_var_data	typeref:struct:termios
output	compile_commands.json	/^{ "directory": "\/home\/samd-hoo\/files\/c19_minishell_basil_fork_01.gg", "file": "src\/cli\/com/;"	s	object:0
parser	src/parser/parser.c	/^int	parser(t_ast_node **first_ast_node, $/;"	f	typeref:typename:int
parser_level_syntax_error	minishell.h	/^	bool				parser_level_syntax_error;$/;"	m	struct:s_error_checks	typeref:typename:bool
pipe	minishell.h	/^	struct s_ast_node	*pipe;$/;"	m	struct:s_ast_node	typeref:struct:s_ast_node *
pipe_check	minishell.h	/^	bool			pipe_check;$/;"	m	struct:s_var_data	typeref:typename:bool
prev	minishell.h	/^	struct s_token_node	*prev;$/;"	m	struct:s_token_node	typeref:struct:s_token_node *
prompt_error_checks	src/error_handler/error_checks.c	/^int	prompt_error_checks(t_token_node *first_node, $/;"	f	typeref:typename:int
re	Makefile	/^re: fclean all$/;"	t
re	src/libft/Makefile	/^re: fclean all$/;"	t
redir_file	src/parser/redir_fcts.c	/^static char *redir_file(char *curr_token, t_var_data *var_data)$/;"	f	typeref:typename:char *	file:
redir_type	src/parser/redir_fcts.c	/^static int redir_type(t_token_node *curr_token_node)$/;"	f	typeref:typename:int	file:
redirect	minishell.h	/^	t_ast_redir			*redirect;$/;"	m	struct:s_ast_node	typeref:typename:t_ast_redir *
redirect_handler	src/lexer/redirect_handler.c	/^char	*redirect_handler(char *prompt, size_t *index, t_var_data *var_data)$/;"	f	typeref:typename:char *
replace_filename_w_envvar	src/parser/redir_fcts.c	/^static char *replace_filename_w_envvar(char *token_string, t_var_data *var_data)$/;"	f	typeref:typename:char *	file:
restore_fds	src/executor/pipes/pipe_functions.c	/^int	restore_fds(t_var_data *var_data)$/;"	f	typeref:typename:int
restore_tty	src/main/sighandler.c	/^int	restore_tty(t_var_data *var_data)$/;"	f	typeref:typename:int
s_ast_node	minishell.h	/^typedef struct s_ast_node $/;"	s
s_ast_redir	minishell.h	/^typedef struct s_ast_redir $/;"	s
s_error_checks	minishell.h	/^typedef struct s_error_checks$/;"	s
s_list	src/libft/libft.h	/^typedef struct s_list$/;"	s
s_token_node	minishell.h	/^typedef struct s_token_node $/;"	s
s_var_data	minishell.h	/^typedef struct s_var_data$/;"	s
set_all_to_null	src/parser/abstract_syntax_tree_creation_fcts.c	/^void	set_all_to_null(t_ast_node *curr_ast_node)$/;"	f	typeref:typename:void
sighandler	src/main/sighandler.c	/^int	sighandler(t_var_data *var_data, int mode)$/;"	f	typeref:typename:int
single_quotes	src/lexer/quote_handler.c	/^int	single_quotes(char *prompt,$/;"	f	typeref:typename:int
std_input_fd_backup	minishell.h	/^	int				std_input_fd_backup;$/;"	m	struct:s_var_data	typeref:typename:int
std_output_fd_backup	minishell.h	/^	int				std_output_fd_backup;$/;"	m	struct:s_var_data	typeref:typename:int
t_ast_node	minishell.h	/^} 						t_ast_node;$/;"	t	typeref:struct:s_ast_node
t_ast_redir	minishell.h	/^} 						t_ast_redir;$/;"	t	typeref:struct:s_ast_redir
t_error_checks	minishell.h	/^}	t_error_checks;$/;"	t	typeref:struct:s_error_checks
t_list	src/libft/libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_token_node	minishell.h	/^} 						t_token_node;$/;"	t	typeref:struct:s_token_node
t_var_data	minishell.h	/^} 	t_var_data;$/;"	t	typeref:struct:s_var_data
termios_backup_check	minishell.h	/^	bool			termios_backup_check;$/;"	m	struct:s_var_data	typeref:typename:bool
test_print_parser	src/cli/command_line_inteface.c	/^void	test_print_parser(t_var_data *var_data)$/;"	f	typeref:typename:void
tmp_pipe	minishell.h	/^	int				tmp_pipe[2];$/;"	m	struct:s_var_data	typeref:typename:int[2]
token	minishell.h	/^	char 				*token;$/;"	m	struct:s_token_node	typeref:typename:char *
tokenizer	src/lexer/tokenizer.c	/^t_token_node	*tokenizer(char *prompt,$/;"	f	typeref:typename:t_token_node *
type	minishell.h	/^	int					type;$/;"	m	struct:s_ast_redir	typeref:typename:int
type	minishell.h	/^	int 				type;$/;"	m	struct:s_token_node	typeref:typename:int
type_giver	src/lexer/node_creation.c	/^static int	type_giver(char *prompt, t_token_node *prev_node)$/;"	f	typeref:typename:int	file:
whitespace_exception	src/lexer/tokenizer.c	/^int	whitespace_exception(char *prompt,$/;"	f	typeref:typename:int
word_len	src/libft/ft_split.c	/^static int	word_len(char const *s, int start, char c)$/;"	f	typeref:typename:int	file:
wstatus	minishell.h	/^	int				wstatus;$/;"	m	struct:s_var_data	typeref:typename:int
yes_leak	autocompile.sh	/^yes_leak()$/;"	f
